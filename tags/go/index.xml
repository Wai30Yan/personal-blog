<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Portfolio</title><link>https://Wai30Yan.github.io/personal-blog/tags/go/</link><description>Recent content in go on Portfolio</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 14 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://Wai30Yan.github.io/personal-blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Building TCP Websockets with Go</title><link>https://Wai30Yan.github.io/personal-blog/blogs/web-socket/</link><pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate><guid>https://Wai30Yan.github.io/personal-blog/blogs/web-socket/</guid><description>Websockets are very useful to have when you want real time communication. There are different types of websockets, TCP, UDP and UNIX. In this tutorial, we will go through a basic TCP websockets, both Client and Server.</description></item><item><title>Concurrency with Goroutines</title><link>https://Wai30Yan.github.io/personal-blog/blogs/concurrency/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://Wai30Yan.github.io/personal-blog/blogs/concurrency/</guid><description>Go routines are very useful when you want the program to run fast. However, do not mistake concurrency with parallelism.
To create a goroutine, simple use go keyword
1 2 3 4 5 func aFunc() { fmt.</description></item><item><title>Struct method aka Reciever function in Go</title><link>https://Wai30Yan.github.io/personal-blog/blogs/struct-method/</link><pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate><guid>https://Wai30Yan.github.io/personal-blog/blogs/struct-method/</guid><description>Object Oriented Programming is a little different in Go. Instead of class, Go has struct which is like an object.
Create a struct> Create a struct # First you create a struct object like this:</description></item></channel></rss>