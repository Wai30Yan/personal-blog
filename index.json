[{"content":" This article will focus on what the admin users can do on the Restaurant Web App. For demo, please use these credentials to login.\nusername - bruce password - iambatman\nDemo\nCode for NextJS\nCode for Spring Boot\nThe journey begins with a secure login. Only authorized administrators can access the Admin Page. Once you\u0026rsquo;ve proven your credentials, the backend sends a secure JWT (JSON Web Token), unlocking the gateway to culinary control.\nAdmin Features Demostration\u003e Admin Features Demostration # After login, admin will be welcomed with the table displaying the list of booking made by guest users.\nThe admin can see more information such as ordered items, data and time about individual bookings\nAdmin can navigate to menu item page by using buttons in the navigation bar. There, admin can create or delete the items.\nIn the modal, admin can fill up the form and include a JPG photo (only).\nAfter item is added successfully, react-query will validate the data and notify the admin. The page doesn\u0026rsquo;t need to be refresh to see the changes.\nDeleting the item also works the same way. But there is more happening in the background which is explained in later part.\nLastly, the admin will be taken to logout page, JWT token will be deleted from localstorage and won\u0026rsquo;t have access to data when the Logout button is clicked. The Tech Ensemble Behind the Scenes\u003e The Tech Ensemble Behind the Scenes # The part will only explain about the Spring Boot backend as the frontend was explained in the other article.\nJava Spring Boot 3 and Spring Security 6: The Backend Guardians\u003e Java Spring Boot 3 and Spring Security 6: The Backend Guardians # Building the web server to handle HTTP requests was quite easy and straight forward as Spring Boot was already working on the API routes under the hood. The hard part, for someone new to Spring Boot, was working with Java Bean and understanding dependency circle.\nFiles Storing in MongoDB\u003e Files Storing in MongoDB # I decided to use MongoDB instead of S3 bucket for storing the photo. So, I had to learn how MongoDB store files first which was the easy part. Then, I just need to associate the menu-items documents with the right photos.\nAnd moreover, I had to make sure when admin deletes a menu item the right photo is deleted from the storage and also remove the item and update the total price from the bookings accordingly.\nAuthenticated API endpoints\u003e Authenticated API endpoints # Admin API endpoints can only be process if the HTTP header contains JWT token. As I didn\u0026rsquo;t know some of the functions in Spring Security 5 were deprecated, learning Spring Security 6 took a few days and I was watching Spring Security 5 tutorials for days.\nDeploying the Backend Server\u003e Deploying the Backend Server # I used Google Cloud for the deployment with .jar file produced with maven which I found it is way simpler and straightforward compare to AWS ElasticBeanstalk. Initially, I was trying to deploy with AWS. But at the end I found out choosing ElasticBeanstalk was not the right choice for a personal portfolio project. I\u0026rsquo;ll write a separate article for this topic in near future.\n","date":"17 November 2023","permalink":"/personal-blog/projects/fullstack-web-app/","section":"Personal Blogs","summary":"This article will focus on what the admin users can do on the Restaurant Web App. For demo, please use these credentials to login.\nusername - bruce password - iambatman","title":"Admin Page for the Restaurant Web App with Next.js and Spring Boot"},{"content":" Embarking on a journey through the digital culinary landscape, I present to you a showcase of innovation and flavor—my Next.js restaurant web app. This project seamlessly marries the frontend prowess of Next.js with TypeScript, orchestrating a delightful dance of flavors complemented by the robust backend duo of Java 17, Spring Boot 3 and Spring Security 6, all orchestrated by MongoDB.\nDemo Code for NextJS Code for Spring Boot Two Worlds, One App: Guest and Admin\u003e Two Worlds, One App: Guest and Admin # As the heart of this gastronomic voyage, our web app accommodates two distinct realms—the guest and the admin. While guests savor the immersive dining experience, administrators wield the power to curate the culinary offerings.\nThis article will focus on what the Guest user can do. The admin features will be explained in a different article.\nBooking Elegance\u003e Booking Elegance # Our guests embark on a journey of ease and elegance as they make reservations effortlessly. The booking system is designed with simplicity in mind, allowing users to select menu items and complete the reservation process seamlessly.\nWhen users choose an item, the navigation bar will be updated with the total price of the selected items.\nThe items can also be removed completely by clicking Remove. The button will only be enable if there is at least one item chosen.\nGuests can also filter menu items based on categories main courses, side dishes, desserts, and beverages—right from the homepage.\nAfter choosing the item, the user can fill up the information to make a reservation by clicking the button at right top corner.\nAnd to continue with the booking process, the users will be taken to checkout page where they can review and finally submit the order.\nUpon a successful booking process, the users will be taken back to homepage and a notification will pop up at the bottom.\nThe Tech Ensemble Behind the Scenes\u003e The Tech Ensemble Behind the Scenes # Next.js and TypeScript: A Symphony of Frontend Excellence\u003e Next.js and TypeScript: A Symphony of Frontend Excellence # The frontend of our web app is an orchestration of Next.js and TypeScript, combining the power of a React framework with the static typing prowess of TypeScript. This dynamic duo creates a smooth and responsive user interface that leaves a lasting impression.\nZustand: Crafting the Shopping Cart Experience\u003e Zustand: Crafting the Shopping Cart Experience # Enter Zustand, our secret ingredient for state management. It elegantly handles the intricate dance of quantities as guests add items to their bookings, akin to a curated shopping cart experience.\nReact Query: A Dynamic Data Affair\u003e React Query: A Dynamic Data Affair # Our data fetching choreography is set in motion by React Query, steering away from the conventional getStaticProps. This dynamic approach ensures real-time updates, delivering a seamless experience for our guests.\nJava Spring Boot 3 and Spring Security 6: The Backend Guardians\u003e Java Spring Boot 3 and Spring Security 6: The Backend Guardians # On the backend stage, Java Spring Boot 3 and Spring Security 6 stand as guardians, ensuring the security and integrity of our digital culinary haven. User authentication, role-based access control, and a secure foundation define the backend narrative.\nMongoDB: The Culinary Database\u003e MongoDB: The Culinary Database # Our digital kitchen relies on MongoDB to store and retrieve data efficiently. From user information to bookings and menu items, MongoDB ensures a seamless and scalable data storage solution.\n","date":"17 November 2023","permalink":"/personal-blog/projects/fullstack-web-app/","section":"Personal Blogs","summary":"Embarking on a journey through the digital culinary landscape, I present to you a showcase of innovation and flavor—my Next.js restaurant web app. This project seamlessly marries the frontend prowess of Next.","title":"Building a Restaurant Web App with Next.js and Spring Boot 3"},{"content":"","date":"17 November 2023","permalink":"/personal-blog/tags/google-cloud/","section":"Tags","summary":"","title":"google-cloud"},{"content":"","date":"17 November 2023","permalink":"/personal-blog/tags/next-js/","section":"Tags","summary":"","title":"next-js"},{"content":" Showcasing the projects I have built to try out new technologies and frameworks during my learning journey. ","date":"17 November 2023","permalink":"/personal-blog/projects/","section":"Personal Blogs","summary":" Showcasing the projects I have built to try out new technologies and frameworks during my learning journey. ","title":"Personal Blogs"},{"content":"","date":"17 November 2023","permalink":"/personal-blog/","section":"Portfolio","summary":"","title":"Portfolio"},{"content":"","date":"17 November 2023","permalink":"/personal-blog/tags/spring-boot-3/","section":"Tags","summary":"","title":"spring-boot-3"},{"content":"","date":"17 November 2023","permalink":"/personal-blog/tags/spring-security-6/","section":"Tags","summary":"","title":"spring-security-6"},{"content":"","date":"17 November 2023","permalink":"/personal-blog/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"23 February 2023","permalink":"/personal-blog/tags/go/","section":"Tags","summary":"","title":"go"},{"content":"","date":"23 February 2023","permalink":"/personal-blog/tags/json/","section":"Tags","summary":"","title":"json"},{"content":" Posting interesting and fun articles about programming, software and cyber security topics as frequently as I can. ","date":"23 February 2023","permalink":"/personal-blog/blogs/","section":"Personal Blogs","summary":" Posting interesting and fun articles about programming, software and cyber security topics as frequently as I can. ","title":"Personal Blogs"},{"content":" This is a fun article for those who are interested in learning Go. This tutorial will show how to parse JavaScript Object Notation(JSON) with Go struct type, Text or HTML Templates with Go standard library. Github repo for this article. Introduction\u003e Introduction # Go has four types of data structure, arrays, slices, maps and struct. In this tutorial, we will use struct. To get a json object, we\u0026rsquo;ll use my favorite api, JokeAPI. I use this whenever I am learning new technologies such as React, Flutter, or backend development.\nThen, we will extract the json object from the http response and decode it to the struct. Finally, we\u0026rsquo;ll use template libraries to save these jokes as both text and HTML files.\nJSON returned by the API\u003e JSON returned by the API # var url string = \u0026#34;https://v2.jokeapi.dev/joke/Programming\u0026#34; Declaring struct base on JSON\u003e Declaring struct base on JSON # A struct is like an object. It has fields and data types. The fields name are declared with capital letters to export them. To associate each field with json field, literal string is used.\ntype Joke struct { Category string `json:\u0026#34;category\u0026#34;` Type string `json:\u0026#34;type\u0026#34;` Joke string `json:\u0026#34;joke\u0026#34;` SetUp string `json:\u0026#34;setup\u0026#34;` Delivery string `json:\u0026#34;delivery\u0026#34;` ID int `json:\u0026#34;id\u0026#34;` Safe bool `json:\u0026#34;safe\u0026#34;` } Notice One of the fields, Joke string, was named the same as the type Joke struct. It is a bad practice \u0026amp; poor choice of word. But I decided to keep it there to remind myself this type of things can happen. Plus, I wanted to keep the same field name as the json object returned by API call.\nWrite a function that fetch jokes\u003e Write a function that fetch jokes # func getJokes() Joke { response, err := http.Get(url) if err != nil { log.Fatal(err) } defer response.Body.Close() var joke Joke\tjson.NewDecoder(response.Body).Decode(\u0026amp;joke) return joke // output: {Programming twopart Why do programmers prefer using the dark mode? Because light attracts bugs. 232 true} } To get the json data, we declare a Joke variable. Then, create a NewDecoder object using response.Body. The NewDecoder object has a Decode() function that takes address to the Joke variable to compare JSON keys and extract values.\nThe output is a Go struct with curly brackets. It does not show JSON field name. We\u0026rsquo;ll use template packages later to format the output.\nCalling the getJokes() in main()\u003e Calling the getJokes() in main() # To fetch 10 jokes, let\u0026rsquo;s call the function in a forLoop. And append each joke into jokes slice.\nvar jokes []Joke for i := 0; i \u0026lt; 10; i++ { joke := getJokes() jokes = append(jokes, joke) } Declare template variables\u003e Declare template variables # The joke json objects decoded in getJokes() are not neatly formatted. It is also unclear what field each json object contains. Depending on the type of joke, it can contain \u0026quot;joke\u0026quot; or \u0026quot;setup\u0026quot; \u0026amp; \u0026quot;delivery\u0026quot; fields. To format them, we\u0026rsquo;ll use templates.\nGo\u0026rsquo;s standard library comes with a package for that. There are two types of templates, text/template \u0026amp; html/template. The later can be used for simple frontend application.\nInside the template, you will see double brackets, {{ }}, which are called action. They are very useful for accessing the object being passed to the template as dynamic data. That object can be access as \u0026quot;{{.}}\u0026quot;, a period. In our case, the dot will represent Joke struct. Then, we can access the fields of the object with dot notation like this {{.Category}}.\nIMPORTANT make sure the spelling is correct.\nText template\u003e Text template # The {{range .}} in the first line and {{end}} in the last line of code is simply a forLoop to iterate through all the fields of Joke struct. The dot represents a Joke struct.\nvar templ = `{{range .}}------------------------- Category: {{.Category}} Type: {{.Type}} Joke: {{.Joke}} SetUp: {{.SetUp}} Delivery: {{.Delivery}} ID: {{.ID}} Safe: {{.Safe}} {{end}}` HTML template\u003e HTML template # var templ = `{{range .}} \u0026lt;h3\u0026gt;Category: {{.Category}}\u0026lt;/h3\u0026gt; \u0026lt;h5\u0026gt;Type: {{.Type}}\u0026lt;/h5\u0026gt; \u0026lt;p\u0026gt;Joke: {{.Joke}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Setup: {{.SetUp}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Delivery: {{.Delivery}}\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;ID: {{.ID}}, Safe: {{.Safe}}\u0026lt;/p\u0026gt; {{end}}` Parsing and Executing the templates\u003e Parsing and Executing the templates # jk, err := template.New(\u0026#34;joke\u0026#34;).Parse(templ) if err != nil { log.Fatal(err) } report.Execute(os.Stdout, jokes) Control flows inside templates\u003e Control flows inside templates # You can also execute logical flow inside action such as forLoop and if/else statements. The previous text template is good, but can be improved. Depending on the type of joke, some of the fields are blank. If the joke type is single, SetUp and Delivery fields are empty.\nLet\u0026rsquo;s fix that with if/else statement inside the template.\nvar templ = `{{range .}}------------------------- Category: {{.Category}} Type: {{.Type}} {{if .Joke}}Joke: {{.Joke}} {{else}}SetUp: {{.SetUp}} Delivery: {{.Delivery}} {{end}} ID: {{.ID}} Safe: {{.Safe}} {{end}}` It\u0026rsquo;s simple, if the object has Joke field, render it. Else, render SetUp \u0026amp; Delivery.\n","date":"23 February 2023","permalink":"/personal-blog/blogs/go-fun/","section":"Personal Blogs","summary":"This is a fun article for those who are interested in learning Go. This tutorial will show how to parse JavaScript Object Notation(JSON) with Go struct type, Text or HTML Templates with Go standard library.","title":"Practicing Go with Struct, Json, API and Templates"},{"content":"","date":"23 February 2023","permalink":"/personal-blog/tags/struct/","section":"Tags","summary":"","title":"struct"},{"content":"","date":"23 February 2023","permalink":"/personal-blog/tags/templates/","section":"Tags","summary":"","title":"templates"},{"content":" Websockets are very useful to have when you want real time communication like messaging app or an online game server. There are different types of websockets, TCP, UDP and UNIX. In this tutorial, we will go through a basic TCP websockets, both Client and Server. Building TCP server\u003e Building TCP server # First, let\u0026rsquo;s start with building a TCP websocket server. Create a file name server.go. Then, add the following code. You can find the Github repository here.\npackage main import ( \u0026#34;os\u0026#34; ) func main() { arguments := os.Args if len(arguments) == 1 { fmt.Println(\u0026#34;Please provide a port number\\n\u0026#34;) } PORT := \u0026#34;:\u0026#34; + arguments[1] listener, err := net.Listen(\u0026#34;tcp\u0026#34;, PORT) if err != nil { fmt.Println(err) return } defer listener.Close() } I\u0026rsquo;m using command-line arguement for PORT number. But you can declare and assign a value in the code if you want. When you run the go file, you use the command go run main.go. main.go is the first arguement with index 0. Just include the port number at the end like this: go run main.go 1234.\nThis code is listener, err := net.Listen(\u0026quot;tcp\u0026quot;, PORT) is responsible for declaring a listener. The listener waits for incoming connections from clients. It is part of net package from standard library. The Listen func accept two parameters, protocol and port number.\nIn the example, I used \u0026ldquo;tcp\u0026rdquo;. There are other options like \u0026ldquo;udp\u0026rdquo; and \u0026ldquo;unix\u0026rdquo;.\nAccepting incoming TCP connections\u003e Accepting incoming TCP connections # conn, err := listener.Accept() To establish the communication, the listener needs to accept the incoming connection. The listener.Accept() returns net.Conn which represents a connection and an error. The conn object can then be used for reading and writing data.\nReading incoming texts\u003e Reading incoming texts # We\u0026rsquo;ll use bufio package for reading message. conn object we saw previously can be used as io.Reader or io.Writer which can be passed into NewReader() to read the incoming message. It is also a good habit to remove extra white spaces.\nnetData, err := bufio.NewReader(conn).ReadString(\u0026#39;\\n\u0026#39;) text := strings.TrimSpace(netData) if text == \u0026#34;STOP\u0026#34; { break } fmt.Println(\u0026#34;client: \u0026#34; + text) The server will stop the socket connection if the client sent STOP as message (case sensitive).\nResponding\u003e Responding # The server sends a response when the conn object call Write(). But, the text has to be converted to byte. In the byte(), you can pass in the message as string. You can also pass json using json package.\nIn the example, the server is responding with the time and message the client sent.\nconn.Write([]byte(\u0026#34;You sent \u0026#34;+ temp + \u0026#34; at \u0026#34; + time.Now().Format(\u0026#34;15:04:05\\n\u0026#34;))) Building a TCP Client\u003e Building a TCP Client # The code for client is partially similar to that of server except that command-line arguement should include url address with port number go run client.go localhost:8080.\nNotice, for the server, we only included port number go run server.go 8080\nThe client also must use the same port number as the server as it needs to know at what port tcp server is running on.\nfunc main() { arguments := os.Args if len(arguments) == 1 { fmt.Println(\u0026#34;Please provide host:port.\u0026#34;) return } connect := arguments[1] } Establishing connection with the server\u003e Establishing connection with the server # To establish a connection, ResolveTCPAddr() from net package is called using the user input. If the host in the address parameter is not a literal IP address or the port is not a literal port number, ResolveTCPAddr resolves the address to an address of TCP end point.\nThen the client dial the tcp server with DialTCP() using the address resolved by the previous function. Notice \u0026quot;tcp\u0026quot; as parameter. You can also use \u0026ldquo;tcp4\u0026rdquo;, \u0026ldquo;tcp6\u0026rdquo; or \u0026ldquo;udp\u0026rdquo; as well.\nYou can also use Dial() and you don\u0026rsquo;t need to use ResolveTCPAddr() or DialTCP(). The client Dial() and the server accepts with listener listener.Accept().\ntcpAddr, _ := net.ResolveTCPAddr(\u0026#34;tcp\u0026#34;, connect) conn, _ := net.DialTCP(\u0026#34;tcp\u0026#34;, nil, tcpAddr) Sending and Recieving texts\u003e Sending and Recieving texts # Unlike the server, the client will both read and write messages. But same package bufio will be used for both purposes.\nThis code will read the string the user adds. NewReader(os.Stdin) to accept and read user input. The second line is to send the user input to server. It uses fmt package with conn object as io.Writer to send the text.\ntext, _ := bufio.NewReader(os.Stdin).ReadString(\u0026#39;\\n\u0026#39;) fmt.Fprintf(conn, text+\u0026#34;\\n\u0026#34;) The conn object will then be used with bufio to read the messages coming back from the server. And print the respond with fmt.\nmessage, _ := bufio.NewReader(conn).ReadString(\u0026#39;\\n\u0026#39;) fmt.Print(\u0026#34;-\u0026gt;: \u0026#34; + message) Full for loop\nfor { fmt.Print(\u0026#34;\u0026gt;\u0026gt; \u0026#34;) text, _ := bufio.NewReader(os.Stdin).ReadString(\u0026#39;\\n\u0026#39;) fmt.Fprintf(conn, text+\u0026#34;\\n\u0026#34;) message, _ := bufio.NewReader(conn).ReadString(\u0026#39;\\n\u0026#39;) fmt.Print(\u0026#34;-\u0026gt;: \u0026#34; + message) if strings.TrimSpace(string(text)) == \u0026#34;STOP\u0026#34; { fmt.Println(\u0026#34;TCP client exiting...\u0026#34;) return } } Handling Multiple Connections Concurrently\u003e Handling Multiple Connections Concurrently # We\u0026rsquo;ll use concurrency in server to handle multiple clients. We just need to extract the for loop in main() and put it to a seperate function. Then, call this function as a goroutine in main().\n","date":"14 February 2023","permalink":"/personal-blog/blogs/web-socket/","section":"Personal Blogs","summary":"Websockets are very useful to have when you want real time communication like messaging app or an online game server. There are different types of websockets, TCP, UDP and UNIX.","title":"Building TCP Websockets with Go"},{"content":"","date":"14 February 2023","permalink":"/personal-blog/tags/concurrency/","section":"Tags","summary":"","title":"concurrency"},{"content":"","date":"14 February 2023","permalink":"/personal-blog/tags/tcp/","section":"Tags","summary":"","title":"tcp"},{"content":"","date":"14 February 2023","permalink":"/personal-blog/tags/web-sockets/","section":"Tags","summary":"","title":"web-sockets"},{"content":"","date":"11 February 2023","permalink":"/personal-blog/tags/cyber-security/","section":"Tags","summary":"","title":"cyber-security"},{"content":" When it comes to hacking, knowledge is power. That is why gathering information about the target system is the very first step in pentesting. The most popular tool to do it is NMAP. This article will teach you how to use it in Kali LInux. What is NMAP?\u003e What is NMAP? # nmap, short for \u0026ldquo;Network Mapper\u0026rdquo; is a go to tool for reconessance. It scans the ports that are used in target system and checks the services running on those ports. You can use it to scan the machines in the same network or even web application which are hosted far from you. The only thing you need to know is the IP address of the targets. Targets with poorly implemented security will reveal\nPorts and Services\u003e Ports and Services # Every servers or computers have total of 65535 ports. The first 1024 ports are reserved for system. If you are familiar with web application development, notice the server runs on port :8080 and client on :3000, not between 1-1024.\nMost used ports numbers and services:\nservice port no HTTP 80 HTTPS 443 NETBIOS 139 SMB 445 FTP 20, 21 Using NMAP\u003e Using NMAP # Using nmap is very straight forward. The following command will scan the IP address provided. In this tutorial, I\u0026rsquo;ll use \u0026lsquo; www.owasp.org\u0026rsquo; for the example. Before, I used whatsmyid to find out the IP address.\n$ nmap 104.22.27.77 The result showed information such as PORT number, STATE of the port and what services were running. It also mentioned 996 tcp ports were filtered.\nHow about I only wanna to scan specific port\u003e How about I only wanna to scan specific port # In addition to IP address, you can add flags for more specific scanning. If you only want to scan port 20, you can do it as:\n// -p must be followed by the number $ nmap -p 80 104.22.27.77 To scan ports range from 80-100:\n$ nmap -p 80-100 104.22.27.77 If the default output does not include enough information, you can add -v for verbosity. Verbosity has 2 levels. Single v for level one and, double for level two. In the example photo, I used -vv flag for level two verbosity. You can see it has more information such as REASON compare to the first output.\nThere are many other -flags for more features. There are very simple and easy to learn. You can read the instruction by nmap -h or man nmap.\n","date":"11 February 2023","permalink":"/personal-blog/blogs/nmap/","section":"Personal Blogs","summary":"When it comes to hacking, knowledge is power. That is why gathering information about the target system is the very first step in pentesting. The most popular tool to do it is NMAP.","title":"How to use NMAP for information gathering"},{"content":"","date":"11 February 2023","permalink":"/personal-blog/tags/kali-linux/","section":"Tags","summary":"","title":"kali-linux"},{"content":"","date":"11 February 2023","permalink":"/personal-blog/tags/nmap/","section":"Tags","summary":"","title":"nmap"},{"content":"","date":"11 February 2023","permalink":"/personal-blog/tags/pentesting-tool/","section":"Tags","summary":"","title":"pentesting-tool"},{"content":"","date":"9 February 2023","permalink":"/personal-blog/tags/backend/","section":"Tags","summary":"","title":"backend"},{"content":"","date":"9 February 2023","permalink":"/personal-blog/tags/golang/","section":"Tags","summary":"","title":"golang"},{"content":"","date":"9 February 2023","permalink":"/personal-blog/tags/rest-api/","section":"Tags","summary":"","title":"rest-api"},{"content":" Representational State Transfer (REST) is a popular architecture in software development. It is used for communication between applications e.g. frontend and backend. Hypertext Transfer Protocol (HTTP) and JavaScript Object Notation (JSON) are used for communication.\nThe frontend/client send HTTP requests to the backend/server. The backend send responses. Both request and response use JSON object as message. JSON objects are very easy to read as they are formatted in key-value pairs.\nWhat we\u0026rsquo;ll do?\u003e What we\u0026rsquo;ll do? # In this article, we\u0026rsquo;ll build a RESTful server without using third party libraries which is the beauty of Go as the standard library can do a lot of things. Some of the popular Go libraries are Gin Web Framework, Fiber and Gorilla\nYou can find the Github repo here.\nWhat does a server do?\u003e What does a server do? # The server will handle incoming HTTP requests and perform CRUD (create, read, update, delete) operations. The server will have endpoint to operate HTTP requests. Finally, we will create a Person struct for data.\nIn this tutorial, we will define the endpoints as:\n/get to retrieve all person /person/{id} to retrieve a specific person based on id /add to create a new Person /update/{id} to update an existing Person in the list /delete/{id} to delete an existing Person in the list Declaring Person object for data\u003e Declaring Person object for data # type Person struct { ID int `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } var People []Person In the code shown above, we declare Person object and People as slice of Person (array of people). You can consider slice as array in Go. The syntax `json:\u0026quot;id\u0026quot;` is to serialize the incoming JSON object. It is used for converting JSON objects to Go struct and vice versa. It is important to use the exact format and no spacing unless it is in double quote.\nImplementing the HTTP web server\u003e Implementing the HTTP web server # The server will be implemented in the main function. For the purpose of dealing with multiple routes (different endpoints), a multipluxer is created using the standard library mux := http.NewServeMux() and used it in the server.\nvar PORT = \u0026#34;:8080\u0026#34; func main() { mux := http.NewServeMux() s := \u0026amp;http.Server{ Addr: PORT, Handler: mux, IdleTimeout: 10 * time.Second, ReadTimeout: time.Second, WriteTimeout: time.Second, } } Don\u0026rsquo;t forget to change the PORT number if you have services running on :8080.\nStarting the server\u003e Starting the server # The code below will start the server on localhost:8080. However, you will see nothing at the moment as there is not any handler function that sends a response.\nfmt.Println(\u0026#34;Servering running at\u0026#34;, PORT) _ := s.ListenAndServe() You can start the server with the command go run {filename}.go.\nRetrieving all person (Read operation)\u003e Retrieving all person (Read operation) # Retrieving all person is the simplest job as it does not have params or query in the URL. Just a simple HTTP GET request will do the job.\nfunc getPeople(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: getAllPerson\u0026#34;) json.NewEncoder(w).Encode(People) } Let\u0026rsquo;s breakdown the code json.NewEncoder(w).Encode(People).\njson is the standard library package. NewEncoder() and Encode() are functions that come with it. Encoder() send back a response to where the request came from. See w, ResponseWriter as the arguement. Encode() serialized the People slice to include it in HTTP response. See People we declared early as the arguement. Retrieve a specific person (Read operation)\u003e Retrieve a specific person (Read operation) # This operation is similar to the pervious one except the URL needs to have ID so that the server knows which Person to send back.\nfunc getPerson(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: getPerson\u0026#34;) vars := strings.Split(r.URL.Path, \u0026#34;/\u0026#34;) param := vars[len(vars)-1] id, _ := strconv.Atoi(param) for _, person := range People { if person.ID == id { json.NewEncoder(w).Encode(person) } } } The URL http://localhost:8080/person/1 will return Person with ID: 1. First, the function will extract 1 from the URL and convert it to integar. Then, use that value to find the Person with the same ID and send back a response with it.\nUpdating a person (Update Operation)\u003e Updating a person (Update Operation) # Update function works same way as getPerson(), it extracts the ID from the URL. And, create a updatedPerson using that ID. Then, add the updated value from HTTP request body to the updatedPerson object.\nfunc updatePerson(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: updatePerson\u0026#34;) vars := strings.Split(r.URL.Path, \u0026#34;/\u0026#34;) param := vars[len(vars)-1] id, _ := strconv.Atoi(param) updatedPerson := Person{ ID: id, } json.NewDecoder(r.Body).Decode(\u0026amp;updatedPerson) for i, person := range People { if person.ID == id { People[i] = updatedPerson json.NewEncoder(w).Encode(People[i]) return } } } And finally, loop through the slice, look for the element with the same ID to replace with the Person object wiht updated values.\nDeleting a person (Delete Operation)\u003e Deleting a person (Delete Operation) # Deleting the element works the same way as update operation.\nextract ID loop through the slice find the right element and remove the element func deletePerson(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: deletePerson\u0026#34;) vars := strings.Split(r.URL.Path, \u0026#34;/\u0026#34;) param := vars[len(vars)-1] id, _ := strconv.Atoi(param) for key, person := range People { if person.ID == id { People = append(People[:key], People[key+1:]...) } } } However, it is more like updating the existing slice. When it found the right element to remove, it cut the slice in half and concatanates the two pieces back together.\nTesting the APIs\u003e Testing the APIs # If you don\u0026rsquo;t have a frontend, you can use a VScode extension Thunder Client to test the APIs. It is convenient as you can perform them in the same window unlike Postman application.\nBefore sending the HTTP requests, let\u0026rsquo;s add some dummy data, Person objects, in People slice. Since we are not using a database in this tutorial, we will hardcode it. Add the following code before creating the server.\nPeople = []Person{ {1, \u0026#34;Wai Yan\u0026#34;, 27}, {2, \u0026#34;John\u0026#34;, 48}, {3, \u0026#34;Jane\u0026#34;, 35}, } This will add three Person objects to People slice.\nThen we implement the HTTP handlers in the main function for different endpoints as we defined periviously. In the below code, the strings are endpoints and http.HandlerFunc is calling the respestive functions to operate CRUD.\nmux.Handle(\u0026#34;/get\u0026#34;, http.HandlerFunc(getPeople)) mux.Handle(\u0026#34;/person/\u0026#34;, http.HandlerFunc(getPerson)) mux.Handle(\u0026#34;/add\u0026#34;, http.HandlerFunc(addPerson)) mux.Handle(\u0026#34;/update/\u0026#34;, http.HandlerFunc(updatePerson)) mux.Handle(\u0026#34;/delete/\u0026#34;, http.HandlerFunc(deletePerson)) This tutorial doesn\u0026rsquo;t use a database. So, if you restart the server, the People slice will be reset. ","date":"9 February 2023","permalink":"/personal-blog/blogs/simple-rest-api/","section":"Personal Blogs","summary":"Representational State Transfer (REST) is a popular architecture in software development. It is used for communication between applications e.g. frontend and backend. Hypertext Transfer Protocol (HTTP) and JavaScript Object Notation (JSON) are used for communication.","title":"Simple REST API server with Go"},{"content":"Go routines are very useful when you want the program to run fast. However, do not mistake concurrency with parallelism.\nTo create a goroutine, simple use go keyword\n1 2 3 4 5 func aFunc() { fmt.Println(\u0026#34;Hello World\u0026#34;) } go aFunc() ","date":"7 February 2023","permalink":"/personal-blog/blogs/concurrency/","section":"Personal Blogs","summary":"Go routines are very useful when you want the program to run fast. However, do not mistake concurrency with parallelism.\nTo create a goroutine, simple use go keyword\n1 2 3 4 5 func aFunc() { fmt.","title":"(In Progress) Concurrency with Goroutines"},{"content":"","date":"7 February 2023","permalink":"/personal-blog/tags/go-routines/","section":"Tags","summary":"","title":"go-routines"},{"content":"","date":"7 February 2023","permalink":"/personal-blog/tags/reciever-func/","section":"Tags","summary":"","title":"reciever-func"},{"content":"Object Oriented Programming is a little different in Go. Instead of class, Go has struct which is like an object.\nCreate a struct\u003e Create a struct # First you create a struct object like this:\n1 2 3 4 type Person struct { name string age int } Declaring struct method\u003e Declaring struct method # Then, you pass the struct in a function like this:\n1 2 3 4 func (p *Person) addInfo(name string, age int) { p.name = name p.age = age } Finally, calling the method using the struct\u003e Finally, calling the method using the struct # Then you can call the function using the struct as a reciever like this:\nfunc main() { p = Person{} fmt.Println(p) // output: { 0} p.addInfo(\u0026#34;Wai Yan\u0026#34;, 27) fmt.Println(p) // output: {Wai Yan 27} } Why use reciever function?\u003e Why use reciever function? # The function can only be called using dot operator with p struct which is in a way an object.\n","date":"7 February 2023","permalink":"/personal-blog/blogs/struct-method/","section":"Personal Blogs","summary":"Object Oriented Programming is a little different in Go. Instead of class, Go has struct which is like an object.\nCreate a struct\u003e Create a struct # First you create a struct object like this:","title":"Struct method aka Reciever function in Go"},{"content":"","date":"7 February 2023","permalink":"/personal-blog/tags/struct-method/","section":"Tags","summary":"","title":"struct-method"},{"content":" Ever wonder whenever photos of criminals were shared, FBI arrested them the very next day? Photos contain metadata aka EXIF(Exchangeable Image File Format) which you do not see. That\u0026rsquo;s because metadata are stored in machine readable code. Metadata are usually the keys to protect copyright and licensing of digital artworks. How do you read metadata?\u003e How do you read metadata? # If you are a linux user. It is quite easy. If you aren\u0026rsquo;t it\u0026rsquo;s ok. I mentioned a website that is free and easy to do extract metadata. For Linux users, all you need is a tool call libimage-exiftool-perl. If you don\u0026rsquo;t have it on your machaine, you can install it by\n$ sudo apt install libimage-exiftool-perl After installation, you can start using the tool with the command exiftool. I will use a photo of me during a hiking trip in Kachin State, Myanmar.\nFirst, you need to navigate to the folder where you keep the photo. Then, use the command with the name of the photo file.\n$ exiftool {name of the file} Notice the command was executed in the folder where the photo is stored\nThe output of the exiftool command\u003e The output of the exiftool command # After executing the command, you will see a bunch of information such as color data, date of taking the photo, shutter speed, exposure etc. In the image below, I\u0026rsquo;ve highlighted the Camera Model Name and Create Date.\nThe juicy part (GPS location) 😆\u003e The juicy part (GPS location) 😆 # At the very end, you will see the GPS location in longitude and latitude. If you convert them into decimal format, you can use the output in google map. The is one of the steps that law enforcement use to track criminals 😄.\nWhat if I don\u0026rsquo;t use Linux? Is there another way to read metadata?\u003e What if I don\u0026rsquo;t use Linux? Is there another way to read metadata? # If you don\u0026rsquo;t use Linux, there are some websites that can do the same thing for free. There is one call Jimple. It is very simple to use (drag and drop) and it even shows the location in Google Maps so you don\u0026rsquo;t even have to convert the GPS location to decimal form 😉.\nI used the same photo putao.jpg on Jimpl website. The result are:\nIt also show the location in Google Maps as I mentioned before. The map is pinning at the Northern tip of Myanmar in Kachin State. Very convenient.\nMy friend took that photo in the middle of a jungle. Our phones did not have access to mobile internet or Wifi. And yet, the metadata has the correct coordinates. It\u0026rsquo;s amazing how technology can track us 😱!\nThe photo I used for the example\u003e The photo I used for the example # I didn\u0026rsquo;t reach to the top of Khakaborzi due to weather condition. And, was stuck in a small town name \u0026ldquo;Putao\u0026rdquo;. One interesting fact about Putao is there were no theives. When it\u0026rsquo;s time for the local market to close, the shopkeepers just leave their shop without locking the doors.\nClimbing Khakaborazi in 2019 (Kachin State, Myanmar)\n","date":"5 February 2023","permalink":"/personal-blog/blogs/exif-metadata/","section":"Personal Blogs","summary":"Ever wonder whenever photos of criminals were shared, FBI arrested them the very next day? Photos contain metadata aka EXIF(Exchangeable Image File Format) which you do not see. That\u0026rsquo;s because metadata are stored in machine readable code.","title":"Why you might not wanna share photos online so easily"},{"content":" A programmer with passion for digital technology and ethical hacking recently graduated with the Bachelor of Software Engineering (Honor) at the University of Technology Sydney, majoring in Cyber Security and recently achieved the Offensive Security Certified Professional certificate. I consider even challenge as a chance to learn new things.\nLink to My Old Portfolio\nEducation\u003e Education Cambridge A Level - Taylor\u0026rsquo;s College - 2012-2013 Bachelor\u0026rsquo;s of Medicine - Internataional Medical University - 2015-2016 (drop out) Bachelor of Software Engineering - University of Technology Sydney - 2018-2022 Work Experience\u003e Work Experience Frontend Engineer at Optik Consultancy Nov-Jan 2021\u003e Frontend Engineer at Optik Consultancy Nov-Jan 2021 Worked on DICOM Image Viewer using ReactJS.\nSoftware Engineer at Canditute Jun-Oct 2022\u003e Software Engineer at Canditute Jun-Oct 2022 Web Application development using NextJS. Advanced querying with MongoDB.\nProgramming Languages\u003e Programming Languages Java TypeScript Go C++ Skills\u003e Skills Web Application Development Penetration Testing Programming ","date":"1 January 0001","permalink":"/personal-blog/about/","section":"Portfolio","summary":"A programmer with passion for digital technology and ethical hacking recently graduated with the Bachelor of Software Engineering (Honor) at the University of Technology Sydney, majoring in Cyber Security and recently achieved the Offensive Security Certified Professional certificate.","title":"About Me"},{"content":"","date":"1 January 0001","permalink":"/personal-blog/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/personal-blog/categories/","section":"Categories","summary":"","title":"Categories"},{"content":" Name Wai Yan Phone +61-449-744-269 Email mr.waiyanmyint@gmail.com LinkedIn Wai Yan LinkedIn ","date":"1 January 0001","permalink":"/personal-blog/contact/","section":"Portfolio","summary":" Name Wai Yan Phone +61-449-744-269 Email mr.waiyanmyint@gmail.com LinkedIn Wai Yan LinkedIn ","title":"Contact"},{"content":"","date":"1 January 0001","permalink":"/personal-blog/series/","section":"Series","summary":"","title":"Series"}]