[{"content":"","date":"9 February 2023","permalink":"/personal-blog/","section":"","summary":"","title":""},{"content":"","date":"9 February 2023","permalink":"/personal-blog/tags/backend/","section":"Tags","summary":"","title":"backend"},{"content":"","date":"9 February 2023","permalink":"/personal-blog/tags/golang/","section":"Tags","summary":"","title":"golang"},{"content":" Posting interesting and fun articles about programming, software and cyber security topics as frequently as I can. ","date":"9 February 2023","permalink":"/personal-blog/blogs/","section":"Personal Blogs","summary":" Posting interesting and fun articles about programming, software and cyber security topics as frequently as I can. ","title":"Personal Blogs"},{"content":"","date":"9 February 2023","permalink":"/personal-blog/tags/rest-api/","section":"Tags","summary":"","title":"rest-api"},{"content":" Representational State Transfer (REST) is a popular architecture in software development. It is used for communication between applications e.g. frontend and backend. Hypertext Transfer Protocol (HTTP) and JavaScript Object Notation (JSON) are used for communication.\nThe frontend/client send HTTP requests to the backend/server. The backend send responses. Both request and response use JSON object as message. JSON objects are very easy to read as they are formatted in key-value pairs.\nWhat we\u0026rsquo;ll do?\u003e What we\u0026rsquo;ll do? # In this article, we\u0026rsquo;ll build a RESTful server without using third party libraries which is the beauty of Go as the standard library can do a lot of things. Some of the popular Go libraries are Gin Web Framework, Fiber and Gorilla\nYou can find the Github repo here.\nWhat does a server do?\u003e What does a server do? # The server will handle incoming HTTP requests and perform CRUD (create, read, update, delete) operations. The server will have endpoint to operate HTTP requests. Finally, we will create a Person struct for data.\nIn this tutorial, we will define the endpoints as:\n/get to retrieve all person /person/{id} to retrieve a specific person based on id /add to create a new Person /update/{id} to update an existing Person in the list /delete/{id} to delete an existing Person in the list Declaring Person object for data\u003e Declaring Person object for data # type Person struct { ID int `json:\u0026#34;id\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Age int `json:\u0026#34;age\u0026#34;` } var People []Person In the code shown above, we declare Person object and People as slice of Person (array of people). You can consider slice as array in Go. The syntax `json:\u0026quot;id\u0026quot;` is to serialize the incoming JSON object. It is used for converting JSON objects to Go struct and vice versa. It is important to use the exact format and no spacing unless it is in double quote.\nImplementing the HTTP web server\u003e Implementing the HTTP web server # The server will be implemented in the main function. For the purpose of dealing with multiple routes (different endpoints), a multipluxer is created using the standard library mux := http.NewServeMux() and used it in the server.\nvar PORT = \u0026#34;:8080\u0026#34; func main() { mux := http.NewServeMux() s := \u0026amp;http.Server{ Addr: PORT, Handler: mux, IdleTimeout: 10 * time.Second, ReadTimeout: time.Second, WriteTimeout: time.Second, } } Don\u0026rsquo;t forget to change the PORT number if you have services running on :8080.\nStarting the server\u003e Starting the server # The code below will start the server on localhost:8080. However, you will see nothing at the moment as there is not any handler function that sends a response.\nfmt.Println(\u0026#34;Servering running at\u0026#34;, PORT) _ := s.ListenAndServe() You can start the server with the command go run {filename}.go.\nRetrieving all person (Read operation)\u003e Retrieving all person (Read operation) # Retrieving all person is the simplest job as it does not have params or query in the URL. Just a simple HTTP GET request will do the job.\nfunc getPeople(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: getAllPerson\u0026#34;) json.NewEncoder(w).Encode(People) } Let\u0026rsquo;s breakdown the code json.NewEncoder(w).Encode(People).\njson is the standard library package. NewEncoder() and Encode() are functions that come with it. Encoder() send back a response to where the request came from. See w, ResponseWriter as the arguement. Encode() serialized the People slice to include it in HTTP response. See People we declared early as the arguement. Retrieve a specific person (Read operation)\u003e Retrieve a specific person (Read operation) # This operation is similar to the pervious one except the URL needs to have ID so that the server knows which Person to send back.\nfunc getPerson(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: getPerson\u0026#34;) vars := strings.Split(r.URL.Path, \u0026#34;/\u0026#34;) param := vars[len(vars)-1] id, _ := strconv.Atoi(param) for _, person := range People { if person.ID == id { json.NewEncoder(w).Encode(person) } } } The URL http://localhost:8080/person/1 will return Person with ID: 1. First, the function will extract 1 from the URL and convert it to integar. Then, use that value to find the Person with the same ID and send back a response with it.\nUpdating a person (Update Operation)\u003e Updating a person (Update Operation) # Update function works same way as getPerson(), it extracts the ID from the URL. And, create a updatedPerson using that ID. Then, add the updated value from HTTP request body to the updatedPerson object.\nfunc updatePerson(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: updatePerson\u0026#34;) vars := strings.Split(r.URL.Path, \u0026#34;/\u0026#34;) param := vars[len(vars)-1] id, _ := strconv.Atoi(param) updatedPerson := Person{ ID: id, } json.NewDecoder(r.Body).Decode(\u0026amp;updatedPerson) for i, person := range People { if person.ID == id { People[i] = updatedPerson json.NewEncoder(w).Encode(People[i]) return } } } And finally, loop through the slice, look for the element with the same ID to replace with the Person object wiht updated values.\nDeleting a person (Delete Operation)\u003e Deleting a person (Delete Operation) # Deleting the element works the same way as update operation.\nextract ID loop through the slice find the right element and remove the element func deletePerson(w http.ResponseWriter, r *http.Request) { fmt.Println(\u0026#34;Endpoint Hit: deletePerson\u0026#34;) vars := strings.Split(r.URL.Path, \u0026#34;/\u0026#34;) param := vars[len(vars)-1] id, _ := strconv.Atoi(param) for key, person := range People { if person.ID == id { People = append(People[:key], People[key+1:]...) } } } However, it is more like updating the existing slice. When it found the right element to remove, it cut the slice in half and concatanates the two pieces back together.\nTesting the APIs\u003e Testing the APIs # If you don\u0026rsquo;t have a frontend, you can use a VScode extension Thunder Client to test the APIs. It is convenient as you can perform them in the same window unlike Postman application.\nBefore sending the HTTP requests, let\u0026rsquo;s add some dummy data, Person objects, in People slice. Since we are not using a database in this tutorial, we will hardcode it. Add the following code before creating the server.\nPeople = []Person{ {1, \u0026#34;Wai Yan\u0026#34;, 27}, {2, \u0026#34;John\u0026#34;, 48}, {3, \u0026#34;Jane\u0026#34;, 35}, } This will add three Person objects to People slice.\nThen we implement the HTTP handlers in the main function for different endpoints as we defined periviously. In the below code, the strings are endpoints and http.HandlerFunc is calling the respestive functions to operate CRUD.\nmux.Handle(\u0026#34;/get\u0026#34;, http.HandlerFunc(getPeople)) mux.Handle(\u0026#34;/person/\u0026#34;, http.HandlerFunc(getPerson)) mux.Handle(\u0026#34;/add\u0026#34;, http.HandlerFunc(addPerson)) mux.Handle(\u0026#34;/update/\u0026#34;, http.HandlerFunc(updatePerson)) mux.Handle(\u0026#34;/delete/\u0026#34;, http.HandlerFunc(deletePerson)) This tutorial doesn\u0026rsquo;t use a database. So, if you restart the server, the People slice will be reset. ","date":"9 February 2023","permalink":"/personal-blog/blogs/simple-rest-api/","section":"Personal Blogs","summary":"Representational State Transfer (REST) is a popular architecture in software development. It is used for communication between applications e.g. frontend and backend. Hypertext Transfer Protocol (HTTP) and JavaScript Object Notation (JSON) are used for communication.","title":"Simple REST API server with Go"},{"content":"","date":"9 February 2023","permalink":"/personal-blog/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"","date":"7 February 2023","permalink":"/personal-blog/tags/concurrency/","section":"Tags","summary":"","title":"concurrency"},{"content":"Go routines are very useful when you want the program to run fast. However, do not mistake concurrency with parallelism.\nTo create a goroutine, simple use go keyword\n1 2 3 4 5 func aFunc() { fmt.Println(\u0026#34;Hello World\u0026#34;) } go aFunc() ","date":"7 February 2023","permalink":"/personal-blog/blogs/concurrency/","section":"Personal Blogs","summary":"Go routines are very useful when you want the program to run fast. However, do not mistake concurrency with parallelism.\nTo create a goroutine, simple use go keyword\n1 2 3 4 5 func aFunc() { fmt.","title":"Concurrency with Goroutines"},{"content":"","date":"7 February 2023","permalink":"/personal-blog/tags/go-routines/","section":"Tags","summary":"","title":"go-routines"},{"content":"","date":"7 February 2023","permalink":"/personal-blog/tags/reciever-func/","section":"Tags","summary":"","title":"reciever-func"},{"content":"Object Oriented Programming is a little different in Go. Instead of class, Go has struct which is like an object.\nCreate a struct\u003e Create a struct # First you create a struct object like this:\n1 2 3 4 type Person struct { name string age int } Declaring struct method\u003e Declaring struct method # Then, you pass the struct in a function like this:\n1 2 3 4 func (p *Person) addInfo(name string, age int) { p.name = name p.age = age } Finally, calling the method using the struct\u003e Finally, calling the method using the struct # Then you can call the function using the struct as a reciever like this:\nfunc main() { p = Person{} fmt.Println(p) // output: { 0} p.addInfo(\u0026#34;Wai Yan\u0026#34;, 27) fmt.Println(p) // output: {Wai Yan 27} } Why use reciever function?\u003e Why use reciever function? # The function can only be called using dot operator with p struct which is in a way an object.\n","date":"7 February 2023","permalink":"/personal-blog/blogs/struct-method/","section":"Personal Blogs","summary":"Object Oriented Programming is a little different in Go. Instead of class, Go has struct which is like an object.\nCreate a struct\u003e Create a struct # First you create a struct object like this:","title":"Struct method aka Reciever function in Go"},{"content":"","date":"7 February 2023","permalink":"/personal-blog/tags/struct-method/","section":"Tags","summary":"","title":"struct-method"},{"content":"","date":"5 February 2023","permalink":"/personal-blog/tags/cyber-security/","section":"Tags","summary":"","title":"cyber-security"},{"content":"","date":"5 February 2023","permalink":"/personal-blog/tags/kali-linux/","section":"Tags","summary":"","title":"kali-linux"},{"content":" Ever wonder whenever photos of criminals were shared, FBI arrested them the very next day? Photos contain metadata aka EXIF(Exchangeable Image File Format) which you do not see. That\u0026rsquo;s because metadata are stored in machine readable code. Metadata are usually the keys to protect copyright and licensing of digital artworks. How do you read metadata?\u003e How do you read metadata? # If you are a linux user. It is quite easy. All you need is a tool call libimage-exiftool-perl. If you don\u0026rsquo;t have it on your machaine, you can install it by\n$ sudo apt install libimage-exiftool-perl After installation, you can start using the tool with the command exiftool. I will use a photo of me during a hiking trip in Kachin State, Myanmar.\nFirst, you need to navigate to the folder where you keep the photo. Then, use the command with the name of the photo file.\n$ exiftool {name of the file} Notice the current directory is 'Desktop/WaiYan'\nThe output of the exiftool command\u003e The output of the exiftool command # After executing the command, you will see a bunch of information such as color data, date of taking the photo, shutter speed, exposure etc. In the image below, I\u0026rsquo;ve highlighted the Camera Model Name and Create Date.\nThe juicy part (GPS location) 😆\u003e The juicy part (GPS location) 😆 # At the very end, you will see the GPS location in longitude and latitude. If you convert them into decimal format, you can use the output in google map. The is one of the steps that law enforcement use to track criminals 😄.\nWhat if I don\u0026rsquo;t use Linux? Is there another way to read metadata?\u003e What if I don\u0026rsquo;t use Linux? Is there another way to read metadata? # If you don\u0026rsquo;t use Linux, there are some websites that can do the same thing for free. There is one call Jimple. It is very simple to use (drag and drop) and it even shows the location in Google Maps so you don\u0026rsquo;t even have to convert the GPS location to decimal form 😉.\nThe photo I used for the example\u003e The photo I used for the example # I didn\u0026rsquo;t reach to the top of Khakaborzi due to weather condition. And, was stuck in a small town name \u0026ldquo;Putao\u0026rdquo;. One interesting fact about Putao is there were no theives. When it\u0026rsquo;s time for the local market to close, the shopkeepers just leave their shop without locking the doors.\nClimbing Khakaborazi in 2019 (Kachin State, Myanmar)\n","date":"5 February 2023","permalink":"/personal-blog/blogs/exif-metadata/","section":"Personal Blogs","summary":"Ever wonder whenever photos of criminals were shared, FBI arrested them the very next day? Photos contain metadata aka EXIF(Exchangeable Image File Format) which you do not see. That\u0026rsquo;s because metadata are stored in machine readable code.","title":"Why you might not wanna share photos online so easily"},{"content":"Intro\u003e Intro Education\u003e Education Work Experience\u003e Work Experience Tech\u003e Tech Skills\u003e Skills ","date":"1 January 0001","permalink":"/personal-blog/about/","section":"","summary":"Intro\u003e Intro Education\u003e Education Work Experience\u003e Work Experience Tech\u003e Tech Skills\u003e Skills ","title":"About Me (Work in progress)"},{"content":"","date":"1 January 0001","permalink":"/personal-blog/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/personal-blog/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"This is the Contact page.\n-\n","date":"1 January 0001","permalink":"/personal-blog/contact/","section":"","summary":"This is the Contact page.\n-","title":"Contact (Work in progress)"},{"content":"","date":"1 January 0001","permalink":"/personal-blog/series/","section":"Series","summary":"","title":"Series"}]